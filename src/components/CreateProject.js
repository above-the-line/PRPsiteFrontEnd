import React, { Component } from 'react'
import { Mutation } from 'react-apollo'
import gql from 'graphql-tag'


// Apollo handles sending mutation to server
// define the mutation and wrap your component 
// with the graphql container 
// (tagged template literal - a function that is passed as a parsed string)
// 
// createProject is the actual mutation name
// as defined in the schema.graphql file in the backend
// in which I have defined the queries and mutations
// that return custom types that cannot be autogenerated
// by Prisma. And, in which, GraphQL Yoga injects as "type-def" variable
// when it's GQL server is instatiated in the index.js file run by node
const CREATE_PROJECT_MUTATION = gql`
  mutation ArbitraryNameForMutationThatCreatesAProject(
    $project_name: String!,
    $project_year: Int!,
    $film_project: Boolean,
    $avi_roles_on_project: Avi_RolesCreateInput!,
    $project_media: Media_ItemCreateInput,
    $project_category: Project_CategoryCreateInput
){ createProject ( 
  	project_name: $project_name,
    project_year: $project_year,
    film_project: $film_project,
    avi_roles_on_project: $avi_roles_on_project,
    project_media: $project_media,
    project_category: $project_category
)
 {
    id
    project_name
    project_year
    film_project
    avi_roles_on_project{
      avi_director 
      avi_gaffer 
      avi_cinematographer 
      avi_writer 
      avi_camera_operator 
      avi_lighting_technician 
      avi_front_end_dev 
      avi_back_end_dev 
      avi_full_stack_dev
    }
    project_media{
      banner_image_url
      video_url
    }
    project_category{
      short_film
      feature_film
    }
  }   
}
`


class CreateProject extends Component {
// Set initial component state
// default values that will be sent
// by Apollo with the gql query, unless overridden below
  state = {
    project_name: '',
    project_year: 2000,
    film_project: false,
    avi_roles_on_project:
     {
        avi_director: false,
        avi_gaffer: false,
        avi_cinematographer: false,
        avi_writer: false,
        avi_camera_operator: false,
        avi_lighting_technician: false,
        avi_front_end_dev: false,
        avi_back_end_dev: false,
        avi_full_stack_dev: false
    },
    project_category: {
        short_film: false,
        feature_film: false
    },
    project_media: {
        banner_image_url: '',
        video_url: ''
    }
  };


  // If I defined handleInputChange as a regular function
  // I would need to bind its state to props with a constructor
  // however, if I use an arrow function, the anonymous function will
  // bind its context to the caller's originating context automatically
  avi_roles_handler = event => {
    const target = event.target;
    // boolean value assigned using conditional operator
    // if event is emitted from a checkbox then
    // make the checkbox true, if not, make it false
    // without this it would be string values "true"/"flase"
    const value = target.type === 'checkbox' ? target.checked : target.value;
    const name = target.name;
    
    // take previous state and overwrite the needed property 
    // cinematographer value was being overwritten because 
    // of an error in the mutation resolver
    // gaffer response was being read by cinematographer variable
    this.setState( (state) => {  
      let updatedState = {
          ...state.avi_roles_on_project,
          [name]: value
        }
      let payload = {avi_roles_on_project: updatedState}
      return payload;
    });
  };

  film_project_handler = event => {
    const target = event.target;
    const value = target.type === 'checkbox' ? target.checked : target.value;
    const name = target.name;
    
    this.setState( state => {
      let updatedState = {
      ...state,
      [name]: value
      }
      return updatedState;
    });
  }



  render() {
    // The parameters of the mutation that will be changed
    // Destructuring the state object declared above
    const { project_name, 
            project_year, 
            film_project,
            avi_roles_on_project: {
              avi_director,
              avi_gaffer,
              avi_cinematographer,
              avi_writer,
              avi_camera_operator,
              avi_lighting_technician,
              avi_front_end_dev,
              avi_back_end_dev,
              avi_full_stack_dev
            },
            project_category: {
              short_film,
              feature_film
            },
            project_media: {
              banner_image_url,
              video_url
            }
          } = this.state;
    return (
      <div>
        <div className="flex flex-column mt3">
          <input
            className="mb2"
            value={project_name}
            onChange={e => this.setState({ project_name: e.target.value })}
            type="text"
            placeholder="The Project Name"
          />
          <input
            className="mb2"
            value={project_year}
            onChange={e => this.setState({ project_year: e.target.value })}
            type="text"
            placeholder="The Year of the Project"
          />
          <label>
            Film project?
            <input
              className="mb2"
              value={film_project}
              name="film_project"
              onChange={this.film_project_handler}
              type="checkbox"
            />
          </label>
          <label>
            Avi gaffer?
            <input
              className="mb2"
              value={avi_gaffer}
              name="avi_gaffer"
              onChange={this.avi_roles_handler}
              type="checkbox"
            />
          </label>
        </div>

        {/* wrap the button element with an Apollo <Mutation /> component
          the button is presented as a "render prop function" result
          and the gql query defined above CREATE_PROJECT_MUTATION is 
          passed as a prop 
          
          Due to React-router you now need to implement an automatic redirect
          from the CreateProject component to the ProjectList component
          after a mutation was performed. The React-router will now navigate
          back to ProjectList that's accessible on the root route /
          */}
        <Mutation mutation={CREATE_PROJECT_MUTATION} 
                  variables={
                    { project_name, 
                      project_year, 
                      film_project,
                      avi_roles_on_project: {
                        avi_director,
                        avi_gaffer,
                        avi_cinematographer,
                        avi_writer,
                        avi_camera_operator,
                        avi_lighting_technician,
                        avi_front_end_dev,
                        avi_back_end_dev,
                        avi_full_stack_dev
                      },
                      project_category: {
                        short_film,
                        feature_film
                      },
                      project_media: {
                        banner_image_url,
                        video_url
                      }
                    }
                  }
                  onCompleted={ () => this.props.history.push('/')}
        >
          {/* To make the button execute the mutation, we
          call the function that Apollo injects into the <Mutation /> 
          componentâ€™s render prop function
          inside the button's onClick event. */}
          { postMutation => (
            <button onClick={postMutation}>
              Submit
            </button>
          )
          }
        </Mutation>
      </div>
    )
  }
}

export default CreateProject